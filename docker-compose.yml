services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: users_db
      POSTGRES_MULTIPLE_DATABASES: users_db,employee_db
      POSTGRES_USER: darum_project
      POSTGRES_PASSWORD: darumtest
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U darum_project" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    ports:
      - "9000:9000"

  # Microservices - Core Infrastructure First
  config-server:
    build:
      context: ./ConfigServer
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: git
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  discovery-service:
    build:
      context: ./DiscoveryService
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8888"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Business Services (depend on config and discovery)
  auth-service:
    build:
      context: ./AuthenticationService
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8083:8083"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8888"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discovery-service:8761/eureka"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  employee-service:
    build:
      context: ./EmployeeManagementService
      dockerfile: Dockerfile
    container_name: employee-service
    ports:
      - "8081:8081"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8888"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discovery-service:8761/eureka"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  api-service:
    build:
      context: ./ApiGatewayService
      dockerfile: Dockerfile
    container_name: api-service
    ports:
      - "8080:8080"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8888"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discovery-service:8761/eureka"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

volumes:
  postgres_data: